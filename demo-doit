#!/usr/bin/bash

# Pre-requisites.
#
# 1. Full access of AWS CLI - Ideally admin access in a training environment. Although not imperative for this - do please always use MFA to access your account.
# 2. Access to https://github.com/peterhodes/aws-cloudformation.   If you're reading this, I'm guessing you have this !
# 3. Keypair file options :
#   3a. If you have one already and want to use that - then just replace "peterKeyPair" in this file with the name of your own keypair.
#   3b. Create one with this command # aws ec2 create-key-pair --key-name peterKeyPair > aws-key-pair.pem
#       It's not imperative that you connect to the EC2 instance that you create.
# 4. Finally - please use the eu-west-2 region (if you use another region you will have to update the ami in the ec2instance template.

# Advantages.
#
# 1. Automatically creates the components necessary to create an EC2.
# 2. Configuration files can be viewed and their elements understood.
# 3. Individual stacks allow the user to understand each component individually (usually everything would be wrapped up into one stack).
# 4. Liberal use of aws cli commands to gather dependency information gives the user an opportunity to gain familiarity with aws cli.

# Getting started.
#
# 1. Download this file - place it in a directory - and run it.

# Command line tools to make life easier.
#
# https://github.com/peterhodes/stackstatus
# https://github.com/peterhodes/stackresources
# https://github.com/peterhodes/stackdelete
# https://github.com/peterhodes/stackdeleteall
# https://github.com/peterhodes/stackstatus
# https://github.com/peterhodes/awsquery
# https://github.com/peterhodes/awsbilling

# Questions.
# 1. Why not do it in one stack ?
#   1a. I wanted this to be a reference as well as a demo - in which each file would represent a simple CloudformationComponent.
#   1b. I wanted there to be lots of stacks so that we could get used to working with lots of stacks simultaneously.
#   1c. I wanted to be in a position to use the aws cli to get dependency information and pass that data as parameters back into other stacks.
#       This also then adds an additional learning opportunity.
# 2. Why not use stack outputs ?
#   2a. See 1c.
# 3. Can this be used for an AWS beginner.
#   3a. Yes and I would encourage that. It creates all of the components for and including an EC2 - without ever (let's say rarely) having to use the Web interfaces.
#       Someone new to AWS can then investigate each component both within the web interface and through the online configuration.



echo
echo "> Downloading template demo-vpc"
curl -so demo-vpc https://raw.githubusercontent.com/peterhodes/aws-cloudformation/main/demo-vpc
echo "> Creating stack-vpc"
aws cloudformation create-stack --stack-name stack-vpc --template-body file://demo-vpc



echo
echo "> Fetching VpcId"
CreateComplete=$(aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE --query 'StackSummaries[?StackName==`stack-vpc`]' --output text)
while [ "$CreateComplete" == "" ]
do
    echo  `date +"%H:%M:%S   waiting for  stack-vpc  creation to complete"`
    sleep 5
    CreateComplete=$(aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE --query 'StackSummaries[?StackName==`stack-vpc`]' --output text)
done
VpcId=$(aws cloudformation list-stack-resources --stack-name stack-vpc --query 'StackResourceSummaries[*].PhysicalResourceId')
echo "> Vpc Id is  >$VpcId<"



echo
echo "> Downloading template demo-subnet"
curl -so demo-subnet https://raw.githubusercontent.com/peterhodes/aws-cloudformation/main/demo-subnet
echo "> Creating stack-subnet"
aws cloudformation create-stack --stack-name stack-subnet --template-body file://demo-subnet --parameters ParameterKey=paramVpcId,ParameterValue=$VpcId ParameterKey=paramCidrBlock,ParameterValue=10.0.0.0/24



echo
echo "> Fetching SubnetId"
CreateComplete=$(aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE --query 'StackSummaries[?StackName==`stack-subnet`]' --output text)                 
while [ "$CreateComplete" == "" ]
do
    echo  `date +"%H:%M:%S   waiting for  stack-subnet  creation to complete"`
    sleep 5
    CreateComplete=$(aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE --query 'StackSummaries[?StackName==`stack-subnet`]' --output text)
done
SubnetId=$(aws cloudformation list-stack-resources --stack-name stack-subnet --query 'StackResourceSummaries[*].PhysicalResourceId')
echo "> Subnet Id is  >$SubnetId<"

exit


echo
echo "> Downloading template demo-routetable"
curl -so demo-routetable https://raw.githubusercontent.com/peterhodes/aws-cloudformation/main/demo-routetable
echo "> Creating stack-routetable"
aws cloudformation create-stack --stack-name stack-routetable --template-body file://demo-routetable --parameters ParameterKey=paramVpcId,ParameterValue=$VpcId



echo
echo "> Downloading template demo-securitygroup"
curl -so demo-securitygroup https://raw.githubusercontent.com/peterhodes/aws-cloudformation/main/demo-securitygroup
echo "> Creating stack-securitygroup"
aws cloudformation create-stack --stack-name stack-securitygroup --template-body file://demo-securitygroup --parameters ParameterKey=paramVpcId,ParameterValue=$VpcId



echo
echo "> Downloading template demo-internetgateway"
curl -so demo-internetgateway https://raw.githubusercontent.com/peterhodes/aws-cloudformation/main/demo-internetgateway
echo "> Creating stack-internetgateway"
aws cloudformation create-stack --stack-name stack-internetgateway --template-body file://demo-internetgateway



echo
echo "> Fetching IgwId"
CreateComplete=$(aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE --query 'StackSummaries[?StackName==`stack-internetgateway`]' --output text)
while [ "$CreateComplete" == "" ]
do
    echo  `date +"%H:%M:%S   waiting for  stack-internetgateway  creation to complete"`
    sleep 5
    CreateComplete=$(aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE --query 'StackSummaries[?StackName==`stack-internetgateway`]' --output text)
done
IgwId=$(aws cloudformation list-stack-resources --stack-name stack-internetgateway --query 'StackResourceSummaries[*].PhysicalResourceId')
echo "> Igw Id is  >$IgwId<"



echo
echo "> Downloading template demo-vpcgatewayattachment"
curl -so demo-vpcgatewayattachment https://raw.githubusercontent.com/peterhodes/aws-cloudformation/main/demo-vpcgatewayattachment
echo "> Creating stack-vpcgatewayattachment"
aws cloudformation create-stack --stack-name stack-vpcgatewayattachment --template-body file://demo-vpcgatewayattachment --parameters ParameterKey=paramVpcId,ParameterValue=$VpcId ParameterKey=paramIgwId,ParameterValue=$IgwId



echo
echo "> Fetching RouteTableId"
CreateComplete=$(aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE --query 'StackSummaries[?StackName==`stack-routetable`]' --output text)
while [ "$CreateComplete" == "" ]
do
    echo  `date +"%H:%M:%S   waiting for  stack-routetable  creation to complete"`
    sleep 5
    CreateComplete=$(aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE --query 'StackSummaries[?StackName==`stack-routetable`]' --output text)
done
RouteTableId=$(aws cloudformation list-stack-resources --stack-name stack-routetable --query 'StackResourceSummaries[*].PhysicalResourceId')
echo "> RouteTable Id is  >$RouteTableId<"



echo
echo "> Downloading template demo-route"
curl -so demo-route https://raw.githubusercontent.com/peterhodes/aws-cloudformation/main/demo-route
echo "> Creating stack-route"
aws cloudformation create-stack --stack-name stack-route --template-body file://demo-route --parameters ParameterKey=paramRouteTableId,ParameterValue=$RouteTableId ParameterKey=paramGatewayId,ParameterValue=$IgwId



echo
echo "> Downloading template demo-subnetroutetableassociation"
curl -so demo-subnetroutetableassociation https://raw.githubusercontent.com/peterhodes/aws-cloudformation/main/demo-subnetroutetableassociation
echo "> Creating stack-subnetroutetableassociation"
aws cloudformation create-stack --stack-name stack-subnetroutetableassociation --template-body file://demo-subnetroutetableassociation --parameters ParameterKey=paramSubnetId,ParameterValue=$SubnetId ParameterKey=paramRouteTableId,ParameterValue=$RouteTableId



echo
echo "> Fetching SecurityGroupId"
CreateComplete=$(aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE --query 'StackSummaries[?StackName==`stack-securitygroup`]' --output text)
while [ "$CreateComplete" == "" ]
do
    echo  `date +"%H:%M:%S   waiting for  stack-securitygroup  creation to complete"`
    sleep 5
    CreateComplete=$(aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE --query 'StackSummaries[?StackName==`stack-securitygroup`]' --output text)
done
SecurityGroupId=$(aws cloudformation list-stack-resources --stack-name stack-securitygroup --query 'StackResourceSummaries[*].PhysicalResourceId')
echo "> SecurityGroup Id is  >$SecurityGroupId<"



echo
echo "> Downloading template demo-ec2instance"
curl -so demo-ec2instance https://raw.githubusercontent.com/peterhodes/aws-cloudformation/main/demo-ec2instance
echo "> Creating stack-ec2instance"
aws cloudformation create-stack --stack-name stack-ec2instance     --template-body file://demo-ec2instance --parameters ParameterKey=paramSubnetId,ParameterValue=$SubnetId ParameterKey=paramKeyPair,ParameterValue=peterKeyPair ParameterKey=paramSecurityGroupIds,ParameterValue=$SecurityGroupId



